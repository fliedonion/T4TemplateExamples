<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ assembly name="Microsoft.CSharp.dll" #><# // load Microsoft.CSharp.dll, if you want to use dynamic type #>
<#@ output extension=".cs" #>
<# /*
	TIPS: want use json? append following:
	\<#@ assembly name="Newtonsoft.Json.dll" \#>
	\<#@ import namespace="Newtonsoft.Json" \#>
	or, 
	\<#@ assembly name="Full\\Path\\to\\Newtonsoft.Json.dll" \#>
	\<#@ import namespace="Newtonsoft.Json" \#>

	note1: tags above are escaped. you need unescape, before you add.
	note2: if you missing `Newtonsoft.Json.dll` use nuget. Or create ASP.NET MVC application, Newtonsoft.Json.dll will added to project reference automatically and you can get from output (bin/debug etc) folder ( in VS2013 )
	*/
#>
<#
	var fi = new System.IO.FileInfo( Host.TemplateFile );
	var templateFileTitle = System.IO.Path.GetFileNameWithoutExtension( Host.TemplateFile );

	XElement e = XElement.Load(Path.Combine(fi.DirectoryName, "SomeFile.xml"));
	var text = e.Elements("body").First().Value.Replace("\n", System.Environment.NewLine); // Replace \n to avoid mismatch line break warning.

	dynamic dyn = XElement.Load(Path.Combine(fi.DirectoryName, "SomeFile.xml"));
#>
// Generated with <#= Host.TemplateFile #>
// Filename is  <#= fi.Name #>
namespace T4TemplateExamples.<#= fi.Directory.Name #> {
	public class <#= templateFileTitle #> {
		private const string readFromXml = @"<#= text #>";

	}
}

